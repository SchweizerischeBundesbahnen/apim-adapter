# handler.yml
---
enabled: true

#------------------------------------------------------------------------------
# Support individual handler chains for each separate endpoint
#
# handlers  --  list of handlers to be used across chains in this microservice
#               including the routing handlers for ALL endpoints
#           --  format: <fully qualified handler class name>@<optional:given name>
# chains    --  allows forming of [1..N] chains, which could be wholly or 
#               used to form handler chains for each endpoint
#               ex.: default chain below, reused partially across multiple endpoints
# paths     --  list all the paths to be used for routing within the microservice
#           ----  path: the URI for the endpoint (ex.: path: '/*v1/*parties/*search/*get')
#           ----  method: the operation in use (ex.: 'post')
#           ----  exec: handlers to be executed -- this element forms the list and 
#                       the order of execution for the handlers
# 
# IMPORTANT NOTES:
# - to avoid executing a handler, it has to be removed/*commented out in the chain
#   the old(er) enabled:boolean for a middleware handler will be ignored
# - all handlers, routing handler included, are to be listed in the execution chain
# - for consistency, give a name to each handler; it is easier to refer to a name
#   vs a fully qualified class name and is more elegant
# - you can list in chains the fully qualified handler class names, and avoid using the 
#   handlers element altogether
#------------------------------------------------------------------------------
handlers:
  # Exception Global exception handler that needs to be called first to wrap all middleware handlers and business handlers
  - com.networknt.exception.ExceptionHandler
  # Metrics handler to calculate response time accurately, this needs to be the second handler in the chain.
  - com.networknt.metrics.prometheus.PrometheusHandler
  #Rate Limiting
  - com.networknt.limit.LimitHandler
  # Traceability Put traceabilityId into response header from request header if it exists
  #- com.networknt.traceability.TraceabilityHandler
  # Correlation Create correlationId if it doesn't exist in the request header and put it into the request header
  #- com.networknt.correlation.CorrelationHandler
  # More advanced Correlation id handler than the one from Light4J
  - ch.sbb.integration.api.gateway.handler.CorrelationHandler
  # API Management Handler for apim-adapter - it enforces throttling policies defined in 3Scale
  - ch.sbb.integration.api.gateway.handler.ThreeScaleAdapterHandler
  - ch.sbb.integration.api.gateway.proxy.ProxyHandlerProvider
  # Swagger Parsing swagger specification based on request uri and method.
  #- com.networknt.swagger.SwaggerHandler
  # Security JWT token verification and scope verification (depending on SwaggerHandler)
  #- com.networknt.security.JwtVerifyHandler
  # Body Parse body based on content type in the header. It must be disabled otherwise the body will be consumed by proxy.
  # - com.networknt.body.BodyHandler
  # SimpleAudit Log important info about the request into audit log
  # - com.networknt.audit.AuditHandler


chains:
  default:
    - com.networknt.exception.ExceptionHandler
    - com.networknt.limit.LimitHandler
    - ch.sbb.integration.api.gateway.handler.CorrelationHandler
    - com.networknt.metrics.prometheus.PrometheusHandler
    - ch.sbb.integration.api.gateway.handler.ThreeScaleAdapterHandler
    - ch.sbb.integration.api.gateway.proxy.ProxyHandlerProvider

paths:
  - path: '/*'
    method: 'get'
    exec:
      - default
  - path: '/*'
    method: 'post'
    exec:
      - default
  - path: '/*'
    method: 'put'
    exec:
      - default
  - path: '/*'
    method: 'patch'
    exec:
      - default
  - path: '/*'
    method: 'delete'
    exec:
      - default
  - path: '/*'
    method: 'options'
    exec:
      - default
  - path: '/*'
    method: 'head'
    exec:
      - default